"""
Django settings for Subject project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(BASE_DIR,'apps'))
sys.path.insert(0, os.path.join(BASE_DIR,'extra_apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '40wg@%y7h*zv+bsy82o)$zm4!hyud*1o$u9qkxlyvq8z$s9bcg'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'DjangoUeditor',
    'xadmin',
    'crispy_forms',  # 记得加逗号
    'coreschema',  # 跨URL资源共享（前后端接口）
    'rest_framework',
    'django_filters',
    'rest_framework.authtoken',  # TokenAuthentication身份验证方案
    'users.apps.UsersConfig',
    'topic.apps.TopicConfig',  # 题目
    'user_operation.apps.UserOperationConfig',
]


# 添加允许执行跨站点请求
CORS_ORIGIN_ALLOW_ALL = True

#  让UserProfile覆盖User
AUTH_USER_MODEL = 'users.UserProfile'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 添加允许执行跨站点请求
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Subject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # 上传media图片使得模板显示图片
            ],
        },
    },
]

WSGI_APPLICATION = 'Subject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),

        # # mysql
        # 'ENGINE': 'django.db.backends.mysql',
        # 'NAME': 'subject',        #数据库名字
        # 'USER': 'root',          #账号
        # 'PASSWORD': 'root',    #密码
        # 'HOST': '127.0.0.1',     #IP
        # 'PORT': '3306',          #端口

        #服务器
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'subject',        #数据库名字
        'USER': 'root',          #账号
        'PASSWORD': 'root',    #密码
        'HOST': '127.0.0.1',     #IP
        'PORT': '3306',          #端口

        # 这里引擎用innodb（默认myisam）
        # 因为后面第三方登录时，要求引擎为INNODB
        # 'OPTIONS':{'init_command': 'SET storage_engine=INNODB'}, #这样设置会报错，改为
        "OPTIONS":{"init_command":"SET default_storage_engine=INNODB;"}

    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # 收集静态文件，先上传，执行命令。再注释，再次上传
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)

MEDIA_URL = '/media/'# 上传图片的路径，上传的图片会自动传递给media目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')#让django识别media是存放文件的

# drf验证
REST_FRAMEWORK = {
    # 验证用户登录信息
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # jwt
        'rest_framework.authentication.BasicAuthentication',  # HTTP基本身份验证
        # 默认后端进行验证：CSRF令牌
        'rest_framework.authentication.SessionAuthentication',
    ),
}

# JWT身份验证
import datetime
JWT_AUTH = {
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=20),  # 设置jwt码过期时间
    'JWT_AUTH_HEADER_PREFIX': 'JWT',  # 不用存储tok，单点登录，可以进行加密（通过加密储存在浏览器，再通过解密得到信息）。JWT需和前端一致
}

#发送邮箱
EMAIL_HOST = "smtp.qq.com"  # SMTP服务器主机
EMAIL_PORT = 25             # 端口
EMAIL_HOST_USER = "1272443075@qq.com"       # 邮箱地址
EMAIL_HOST_PASSWORD = "irfdbbeesjgeiaac"    # 密码
EMAIL_USE_TLS = True
EMAIL_FROM = "1272443075@qq.com"            # 邮箱地址要和EMAIL_HOST_USER保持一致

MYEMAIL = "1272443075@qq.com"


# 小程序登录
APP_KEY = 'fa1f0af603f43f5083386549a69aa0a6'  # 9b11fb3959a0a433fd01e787f3b366dc
APP_ID = 'wxbfe70aa083351b10'  # wxd173b35aa9a693e4
